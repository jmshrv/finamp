plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = 17
    }


    defaultConfig {
        applicationId "com.unicornsonlsd.finamp"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs {
        release {
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        def debugKeyStoreFile = keystoreProperties['debugKeystoreFile']
        if (debugKeyStoreFile != null) {
            debug {
                storeFile file(debugKeyStoreFile)
                storePassword keystoreProperties['debugKeystorePassword']
                keyAlias keystoreProperties['debugKeyAlias']
                keyPassword keystoreProperties['debugKeyPassword']
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Finamp"
            // shrinkResources false
            // minifyEnabled false
        }
        profile {
            applicationIdSuffix '.profile'
            minifyEnabled true // avoid dexing issues
            resValue "string", "app_name", "Finamp Profile"
        }
        debug {
            if (signingConfigs.hasProperty('debug')) {
                signingConfig signingConfigs.debug
            }
            applicationIdSuffix '.debug'
            minifyEnabled true // avoid dexing issues
            resValue "string", "app_name", "Finamp Debug"
        }
    }
    namespace 'com.unicornsonlsd.finamp'
    lint {
        disable 'InvalidPackage'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.mediarouter:mediarouter:1.7.0'
    implementation "androidx.core:core-splashscreen:1.0.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1"
}
